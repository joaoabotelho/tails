import Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :tails, TailsWeb.Endpoint,
  url: [host: "localhost", port: 4000],
  server: true,
  cache_static_manifest: "priv/static/cache_manifest.json"

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :tails, TailsWeb.Endpoint,
#       ...,
#       url: [host: "example.com", port: 443],
#       https: [
#         ...,
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH")
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :tails, TailsWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Use AWS IAM Roles for Service Accounts when token file env is set
cond do
  System.get_env("AWS_SESSION_TOKEN") ->
    config :ex_aws,
      access_key_id: {:system, "AWS_ACCESS_KEY_ID"},
      security_token: {:system, "AWS_SESSION_TOKEN"},
      secret_access_key: {:system, "AWS_SECRET_ACCESS_KEY"}

  System.get_env("AWS_WEB_IDENTITY_TOKEN_FILE") ->
    config :ex_aws,
      secret_access_key: [{:awscli, "profile_name", 30}],
      access_key_id: [{:awscli, "profile_name", 30}],
      awscli_auth_adapter: ExAws.STS.AuthCache.AssumeRoleWebIdentityAdapter

  true ->
    config :ex_aws,
      access_key_id: [System.get_env("AWS_ACCESS_KEY_ID"), :instance_role],
      secret_access_key: [System.get_env("AWS_SECRET_ACCESS_KEY"), :instance_role]
end

config :tails,
  file_storage_adapter: Tails.Vault.Adapters.S3,
  s3_vault_bucket: System.get_env("S3_VAULT_BUCKET"),
  s3_public_bucket: System.get_env("S3_PUBLIC_BUCKET"),
  kms_key_alias: System.get_env("KMS_KEY_ALIAS")

config :tails, Tails.Mailer,
  adapter: Swoosh.Adapters.Gmail,
  username: System.get_env("MAILER_USERNAME") || "",
  password: System.get_env("PASSWORD") || "",
  api_client_id: System.get_env("GOOGLE_API_CLIENT_ID") || "",
  api_client_secret: System.get_env("GOOGLE_API_CLIENT_SECRET") || "",
  redirect_uri: "https://your-app-url.com/auth/google/callback"
